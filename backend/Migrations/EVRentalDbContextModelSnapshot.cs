// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PublicCarRental.Models;

#nullable disable

namespace PublicCarRental.Migrations
{
    [DbContext(typeof(EVRentalDbContext))]
    partial class EVRentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PublicCarRental.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityCardNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PublicCarRental.Models.EVRenter", b =>
                {
                    b.Property<int>("RenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RenterId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RenterId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.ToTable("EVRenters");
                });

            modelBuilder.Entity("PublicCarRental.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PublicCarRental.Models.RentalContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContractId"));

                    b.Property<int>("EVRenterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("ContractId");

                    b.HasIndex("EVRenterId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RentalContracts");
                });

            modelBuilder.Entity("PublicCarRental.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StaffId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("StationId")
                        .HasColumnType("integer");

                    b.HasKey("StaffId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("StationId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("PublicCarRental.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StationId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("PublicCarRental.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("integer");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<int?>("StationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("VehicleId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("ModelId");

                    b.HasIndex("StationId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModelId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("PublicCarRental.Models.EVRenter", b =>
                {
                    b.HasOne("PublicCarRental.Models.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PublicCarRental.Models.EVRenter", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PublicCarRental.Models.Invoice", b =>
                {
                    b.HasOne("PublicCarRental.Models.RentalContract", "Contract")
                        .WithOne("Invoice")
                        .HasForeignKey("PublicCarRental.Models.Invoice", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("PublicCarRental.Models.RentalContract", b =>
                {
                    b.HasOne("PublicCarRental.Models.EVRenter", "EVRenter")
                        .WithMany("RentalContracts")
                        .HasForeignKey("EVRenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublicCarRental.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("PublicCarRental.Models.Station", "Station")
                        .WithMany("RentalContracts")
                        .HasForeignKey("StationId");

                    b.HasOne("PublicCarRental.Models.Vehicle", "Vehicle")
                        .WithMany("RentalContracts")
                        .HasForeignKey("VehicleId");

                    b.Navigation("EVRenter");

                    b.Navigation("Staff");

                    b.Navigation("Station");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("PublicCarRental.Models.Staff", b =>
                {
                    b.HasOne("PublicCarRental.Models.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PublicCarRental.Models.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublicCarRental.Models.Station", "Station")
                        .WithMany("StaffMembers")
                        .HasForeignKey("StationId");

                    b.Navigation("Account");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("PublicCarRental.Models.Vehicle", b =>
                {
                    b.HasOne("PublicCarRental.Models.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublicCarRental.Models.Station", "Station")
                        .WithMany("Vehicles")
                        .HasForeignKey("StationId");

                    b.Navigation("Model");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleModel", b =>
                {
                    b.HasOne("PublicCarRental.Models.VehicleBrand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublicCarRental.Models.VehicleType", "Type")
                        .WithMany("Models")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PublicCarRental.Models.EVRenter", b =>
                {
                    b.Navigation("RentalContracts");
                });

            modelBuilder.Entity("PublicCarRental.Models.RentalContract", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("PublicCarRental.Models.Station", b =>
                {
                    b.Navigation("RentalContracts");

                    b.Navigation("StaffMembers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("PublicCarRental.Models.Vehicle", b =>
                {
                    b.Navigation("RentalContracts");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleBrand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("PublicCarRental.Models.VehicleType", b =>
                {
                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
